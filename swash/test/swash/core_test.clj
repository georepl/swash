(ns swash.core-test
  (:require [clojure.test :refer :all]
            [swash.core :refer :all]))


(def trace '([300 600 5000][340 700 5100][340 600 5300][300 520 5900][330 410 6200][360 323 6500]
             [400 350 7600][450 400 8000][560 590 9600][620 620 12000][600 680 13600][600 700 15000]))

(def trace-coll ['([300 600 5000][340 700 5100][340 600 5300][300 520 5900][330 410 6200][360 323 6500]
                   [400 350 7600][450 400 8000][560 590 9600][620 620 12000][600 680 13600][600 700 15000])
                 '([100 600 25000][140 700 25100][140 600 25300][100 520 25900][130 410 26200][160 323 26500]
                   [200 350 27600][250 400 28000][360 590 29600][320 620 32000][300 680 33600][300 700 35000])
                 '([100 600 35000][140 700 35100][140 600 35300][100 520 35900][130 410 36200][160 323 36500]
                   [200 350 37600][250 400 38000][360 590 39600][320 620 42000][300 680 43600][300 700 45000])])

(def v-res '([0 1.0770329614269007] [100 0.5] [300 0.14907119849998599] [900 0.38005847503304596] [1200 0.30675723300355934] [1500 0.04387246731641329]
             [2600 0.1767766952966369] [3000 0.13721561500062593] [4600 0.02795084971874737] [7000 0.03952847075210474] [8600 0.014285714285714285]))

(def c-res '([100 0.013293415789514432] [300 0.0024474290234193894] [900 0.0035874310412082775] [1200 3.1938416483456215E-4] [1500 0.013062422333276478]
             [2600 0.001610892367389423] [3000 8.978374094211798E-4] [4600 0.00203174473706774] [7000 0.010963904453922776] [8600 0.0038650779773258363]))

(def coll-res ['([0 1.0770329614269007][100 0.5][300 0.14907119849998599][900 0.38005847503304596][1200 0.30675723300355934][1500 0.04387246731641329]
                 [2600 0.1767766952966369] [3000 0.13721561500062593] [4600 0.02795084971874737] [7000 0.03952847075210474] [8600 0.014285714285714285])
               '([20000 1.0770329614269007][20100 0.5][20300 0.14907119849998599][20900 0.38005847503304596][21200 0.30675723300355934][21500 0.04387246731641329]
                 [22600 0.1767766952966369] [23000 0.13721561500062593] [24600 0.020833333333333332] [27000 0.03952847075210474] [28600 0.014285714285714285])
               '([30000 1.0770329614269007][30100 0.5][30300 0.14907119849998599][30900 0.38005847503304596][31200 0.30675723300355934][31500 0.04387246731641329]
                 [32600 0.1767766952966369] [33000 0.13721561500062593] [34600 0.020833333333333332] [37000 0.03952847075210474] [38600 0.014285714285714285])])


(comment
(deftest concat-curvature-profile-test
  (testing "concat curvature profiles"
    (is (= (concat-curvature-profile trace-coll)
           coll-res))))
)

(defn dvd [x y]
  (float (/ x y)))

(deftest velocity-profile-test
  (testing "scaling of velocity profile of single trace"
    (let [coll (velocity-profile '([[8 9 7][8 6 11][5 2 19][6 2 22]][[1 4 30][7 12 40][4 8 45][4 4 49][1 4 50]]))]
      (is (= ['([[0 (dvd 3 4)][4 (dvd 5 8)][12 (dvd 1 3)]][[23 (dvd 10 10)][33 (dvd 5 5)][38 (dvd 4 4)][42 (dvd 3 1)]])])))
    (let [coll (velocity-profile trace)]
      (is (= v-res coll))))
  (testing "concat velocity profiles"
    (is (= (velocity-profile trace-coll)
           coll-res)))
  (testing "scaling of velocity profile of trace collection"
    (let [coll (velocity-profile trace-coll)]
      (is (= (sort-by first coll) coll)))))


(deftest curvature-profile-test
  (testing "scaling of curvature profile of single trace"
    (let [coll (curvature-profile trace)]
      (is (= c-res coll))))
  (testing "scaling of curvature profile of trace collection"
    (let [coll (curvature-profile trace-coll)]
      (is (= (sort-by first coll) coll)))))
